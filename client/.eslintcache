[{"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/index.js":"1","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/reportWebVitals.js":"2","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/App.js":"3","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/LogIn.js":"4","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/Wrapper.js":"5","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/NavigationBar.js":"6","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/Profile.js":"7","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/Home.js":"8","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/ConversationsPipeline.js":"9","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/SingleConversationCard.js":"10","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/Messager.js":"11","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/TextInput.js":"12","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/Messages.js":"13","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/MessageBubble.js":"14","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/PrivateRoute.js":"15","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/store.js":"16","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/reducers/index.js":"17","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/reducers/authReducer.js":"18","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/actions/types.js":"19","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/actions/authActions.js":"20","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/socket.js":"21","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/SignUpModal.js":"22","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/actions/errorActions.js":"23","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/reducers/errorReducer.js":"24"},{"size":820,"mtime":1611537856436,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":1609034702847,"results":"27","hashOfConfig":"26"},{"size":1811,"mtime":1617482177527,"results":"28","hashOfConfig":"26"},{"size":5135,"mtime":1617844889273,"results":"29","hashOfConfig":"26"},{"size":780,"mtime":1609471744642,"results":"30","hashOfConfig":"26"},{"size":2507,"mtime":1617820412727,"results":"31","hashOfConfig":"26"},{"size":195,"mtime":1610500099814,"results":"32","hashOfConfig":"26"},{"size":3801,"mtime":1617558257952,"results":"33","hashOfConfig":"26"},{"size":1391,"mtime":1617497987539,"results":"34","hashOfConfig":"26"},{"size":1544,"mtime":1617820412728,"results":"35","hashOfConfig":"26"},{"size":1329,"mtime":1617820412726,"results":"36","hashOfConfig":"26"},{"size":1732,"mtime":1617480881570,"results":"37","hashOfConfig":"26"},{"size":1428,"mtime":1617505657849,"results":"38","hashOfConfig":"26"},{"size":521,"mtime":1617820412726,"results":"39","hashOfConfig":"26"},{"size":242,"mtime":1612124062311,"results":"40","hashOfConfig":"26"},{"size":1135,"mtime":1616968196657,"results":"41","hashOfConfig":"26"},{"size":207,"mtime":1617836121237,"results":"42","hashOfConfig":"26"},{"size":1314,"mtime":1617820508429,"results":"43","hashOfConfig":"26"},{"size":402,"mtime":1617840749533,"results":"44","hashOfConfig":"26"},{"size":1864,"mtime":1617836019194,"results":"45","hashOfConfig":"26"},{"size":288,"mtime":1617501685764,"results":"46","hashOfConfig":"26"},{"size":4487,"mtime":1617820412727,"results":"47","hashOfConfig":"26"},{"size":359,"mtime":1617840762665,"results":"48","hashOfConfig":"26"},{"size":533,"mtime":1617840805412,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1gdjo31",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/index.js",[],["109","110"],"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/reportWebVitals.js",[],"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/App.js",[],"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/LogIn.js",[],"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/Wrapper.js",[],"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/NavigationBar.js",["111","112"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Divider from \"@material-ui/core/Divider\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport HomeOutlinedIcon from \"@material-ui/icons/HomeOutlined\";\nimport ExitToAppOutlinedIcon from \"@material-ui/icons/ExitToAppOutlined\";\nimport PersonOutlineOutlinedIcon from \"@material-ui/icons/PersonOutlineOutlined\";\nimport PropTypes from \"prop-types\";\n\nimport { logoutUser } from \"../actions/authActions\";\nimport { connect } from \"react-redux\";\n\nconst Nav = styled(Drawer)`\n  background-color: red;\n  display: block;\n  box-shadow: 10px 0 5px -2px #888;\n`;\n\nconst StyledNavItem = styled(ListItemIcon)`\n  display: flex;\n  justify-content: center;\n  margin-top: 1.5rem;\n`;\n\nconst Button = styled.button`\n  border: none;\n  background-color: white;\n`;\n\nconst LogOutIcon = styled(ExitToAppOutlinedIcon)`\n  color: rgb(22, 204, 152);\n\n  &:hover {\n    color: lightgreen;\n    transition: 0.3s;\n  }\n`;\n\nconst StyledListItem = styled(ListItem)``;\n\nclass NavigationBar extends Component {\n  render() {\n    return (\n      <div>\n        <Nav variant=\"permanent\" anchor=\"left\">\n          <List>\n            <StyledListItem>\n              <Link to=\"/\">\n                <StyledNavItem>\n                  <HomeOutlinedIcon\n                    fontSize=\"large\"\n                    style={{ color: \"rgb(22, 204, 152)\" }}\n                  />\n                </StyledNavItem>\n              </Link>\n            </StyledListItem>\n            <ListItem>\n              <Link to=\"/profile\">\n                <StyledNavItem>\n                  <PersonOutlineOutlinedIcon\n                    fontSize=\"large\"\n                    style={{ color: \"rgb(22, 204, 152)\" }}\n                  />\n                </StyledNavItem>\n              </Link>\n            </ListItem>\n            <ListItem>\n              <StyledNavItem>\n                <Button onClick={this.props.logoutUser}>\n                  <LogOutIcon fontSize=\"large\" />\n                </Button>\n              </StyledNavItem>\n            </ListItem>\n          </List>\n        </Nav>\n      </div>\n    );\n  }\n}\n\nNavigationBar.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { logoutUser })(NavigationBar);\n","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/Profile.js",[],"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/Home.js",["113","114"],"import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport socket from \"../socket\";\n\n// redux\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport ConversationsPipeline from \"./ConversationsPipeline\";\nimport Messager from \"./Messager\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100%;\n  justify-content: flex-start;\n  background-color: white;\n`;\nclass Home extends Component {\n  // initailize state\n  state = {\n    activeConversationId: null,\n    conversationLoading: false,\n    activeConversation: {\n      members: [],\n      _id: null,\n      isDirectMessage: null,\n      messages: [],\n      title: {},\n    },\n    conversations: [],\n  };\n\n  // On component did mount, fetch conversation data to populate conversation pipeline\n  async componentDidMount() {\n    const conversations = await axios.get(\"http://localhost:8080/conversation\");\n    this.setState({\n      conversations: conversations.data,\n    });\n\n    socket.on(\"private message\", async ({ message, from }) => {\n      let messages = { ...this.state.activeConversation };\n      messages.messages.push(message);\n      await this.setState({\n        messages,\n      });\n    });\n  }\n\n  // helper function for setting the selected conversation from the pipeline as active\n  toggleActiveConversation = async (conversationId) => {\n    await this.setState(\n      {\n        activeConversationId: conversationId,\n      },\n      () => {\n        this.getActiveConversationMessages();\n      }\n    );\n  };\n\n  // Helper function for fetching the active conversation messages to display in the chat window upon selection\n  getActiveConversationMessages = async () => {\n    const conversation = await axios.get(\n      `http://localhost:8080/conversation/${this.state.activeConversationId}`\n    );\n    await this.setState({\n      activeConversation: {\n        members: conversation.data.conversation.members,\n        _id: conversation.data.conversation._id,\n        isDirectMessage: conversation.data.conversation.isDirectMessage,\n        messages: conversation.data.conversation.messages,\n        title: conversation.data.title,\n      },\n    });\n  };\n\n  // Helper function for sending new private messages\n  onMessage = async (message, conversation) => {\n    let messages = { ...this.state.activeConversation };\n    let recipient = this.state.activeConversation.members.filter((member) => {\n      return member._id != this.props.user.id;\n    });\n    try {\n      const response = await axios.post(\"http://localhost:8080/message\", {\n        conversation,\n        message,\n      });\n      messages.messages.push(response.data);\n      await this.setState({\n        messages,\n      });\n      socket.emit(\"private message\", {\n        message: response.data,\n        // to: recipient.pop()._id,\n        to: this.state.activeConversation._id,\n      });\n    } catch (error) {}\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <ConversationsPipeline\n          toggleActiveConversation={this.toggleActiveConversation}\n          activeConversationId={this.state.activeConversationId}\n          conversations={this.state.conversations}\n        />\n        <Messager\n          activeConversationId={this.state.activeConversationId}\n          conversation={this.state.activeConversation}\n          onMessage={this.onMessage}\n          currentUser={this.props.user.id}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nHome.propTypes = {\n  isAuthenticated: PropTypes.bool.isRequired,\n  loading: PropTypes.bool.isRequired,\n  user: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  loading: state.auth.loading,\n  user: state.auth.user,\n});\n\nexport default connect(mapStateToProps, null)(Home);\n","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/ConversationsPipeline.js",["115"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport SingleConversationCard from \"./SingleConversationCard\";\nimport AddRoundedIcon from \"@material-ui/icons/AddRounded\";\n\nconst Container = styled.div`\n  min-width: 25vw;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 100vh;\n  background-color: lightslategrey;\n  overflow-y: scroll;\n`;\n\nconst AddButton = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  left: 25%;\n  top: 89.5%;\n  background-color: rgb(22, 204, 152);\n  z-index: 1;\n  width: 3rem;\n  height: 3rem;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  color: white;\n`;\n\nclass ConversationsPipeline extends React.Component {\n  render() {\n    return (\n      <Container>\n        {this.props.conversations.map((convo, index) => (\n          <SingleConversationCard\n            id={convo.conversation._id}\n            activeConversationId={this.props.activeConversationId}\n            conversation={convo}\n            toggleActiveConversation={this.props.toggleActiveConversation}\n            key={index}\n          />\n        ))}\n        <Link to=\"#\">\n          <AddButton>\n            <AddRoundedIcon />\n          </AddButton>\n        </Link>\n      </Container>\n    );\n  }\n}\n\nexport default ConversationsPipeline;\n","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/SingleConversationCard.js",["116"],"import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Name = styled.span`\n  font-size: 1rem;\n  font-weight: 200;\n  color: rgb(22, 204, 152);\n`;\n\nconst LatestMessage = styled.span`\n  font-size: 0.75rem;\n  font-weight: 200;\n  color: black;\n`;\n\nconst Time = styled.span`\n  font-size: 0.75rem;\n  font-weight: 200;\n  text-decoration: none;\n`;\n\nconst Button = styled.a`\n  background-color: white;\n  border: ${(props) =>\n    props.activeConversationId === props.id\n      ? \"solid rgb(22, 204, 152) 4px\"\n      : \"none\"};\n  display: flex;\n  width: 95%;\n  min-height: 4rem;\n  flex-direction: column;\n  justify-content: space-evenly;\n  border-radius: 0.15rem;\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  padding-left: 0.5rem;\n  text-decoration: none;\n\n  &:hover {\n    background-color: rgb(22, 204, 152);\n    transition: 0.3s;\n  }\n\n  &:hover > span {\n    color: white;\n    transition: 0.3s;\n  }\n`;\n\nconst SingleConversationCard = (props) => {\n  return (\n    <Button\n      href=\"#\"\n      onClick={() => props.toggleActiveConversation(props.id)}\n      id={props.id}\n      activeConversationId={props.activeConversationId}\n    >\n      <Name className=\"child\">{`${props.conversation.title.firstName} ${props.conversation.title.lastName}`}</Name>\n      <LatestMessage className=\"child\">\n        {props.conversation.latestMessage[0].message}\n      </LatestMessage>\n      {/* <Time className=\"child\">\n        {props.time ? <span>{props.time}</span> : null}\n      </Time> */}\n    </Button>\n  );\n};\n\nexport default SingleConversationCard;\n","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/Messager.js",[],"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/TextInput.js",["117","118","119","120","121"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SendOutlinedIcon from \"@material-ui/icons/SendOutlined\";\nimport Input from \"@material-ui/core/Input\";\nimport FilledInput from \"@material-ui/core/FilledInput\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nclass TextInput extends React.Component {\n  state = {\n    message: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  render() {\n    return (\n      <FormControl fullWidth variant=\"outlined\">\n        <InputLabel>Message</InputLabel>\n        <OutlinedInput\n          id=\"outlined-adornment-password\"\n          type=\"text\"\n          name=\"message\"\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <IconButton edge=\"end\">\n                <SendOutlinedIcon\n                  style={{\n                    color: \"rgb(22, 204, 152)\",\n                  }}\n                  onClick={() =>\n                    this.props.onMessage(\n                      this.state.message,\n                      this.props.activeConversationId\n                    )\n                  }\n                />\n              </IconButton>\n            </InputAdornment>\n          }\n          onChange={(e) => this.handleChange(e)}\n          labelWidth={70}\n        />\n      </FormControl>\n    );\n  }\n}\n\nexport default TextInput;\n","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/Messages.js",["122"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\n\nimport MessageBubble from \"./MessageBubble\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n  color: black;\n  align-items: flex-start;\n  height: 100%;\n  overflow-y: scroll;\n  margin: 1rem;\n`;\n\nconst AlignmentContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: ${(props) =>\n    props.authorIsCurrentUser ? \"flex-end\" : \"flex-start\"};\n  justify-content: ${(props) =>\n    props.authorIsCurrentUser ? \"flex-end\" : \"flex-start\"};\n  width: 100%;\n  height: auto;\n`;\n\nclass Messages extends React.Component {\n  authorIsCurrentUser = (currentUser, author) => {\n    if (currentUser === author) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        {this.props.messages.messages.reverse().map((message) => (\n          <AlignmentContainer\n            authorIsCurrentUser={this.authorIsCurrentUser(\n              this.props.currentUser,\n              message.author\n            )}\n          >\n            <MessageBubble\n              message={message.message}\n              authorIsCurrentUser={this.authorIsCurrentUser(\n                this.props.currentUser,\n                message.author\n              )}\n            />\n          </AlignmentContainer>\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default Messages;\n","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/MessageBubble.js",[],"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/PrivateRoute.js",[],"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/store.js",["123"],"import { createStore, applyMiddleware, compose } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport logger from \"redux-logger\";\nimport storage from \"redux-persist/lib/storage\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst middleware =\n  process.env.NODE_ENV === \"development\" ? [thunk, logger] : [thunk];\n\nlet devTools =\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\nif (process.env.NODE_ENV === \"prod\" || process.env.NODE_ENV === \"production\") {\n  devTools = (a) => a;\n}\n\nexport function configureStore() {\n  let store = createStore(\n    persistedReducer,\n    compose(\n      applyMiddleware(...middleware)\n      // window.navigator.userAgent.includes(\"Chrome\") &&\n      //   typeof window === \"object\"\n      //   ? window.__REDUX_DEVTOOLS_EXTENSION__ &&\n      //       window.__REDUX_DEVTOOLS_EXTENSION__()\n      //   : compose\n    )\n  );\n  let persistor = persistStore(store);\n  return { store, persistor };\n}\n","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/reducers/index.js",[],"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/reducers/authReducer.js",["124","125"],"import {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n} from \"../actions/types\";\n\nconst initialState = {\n  isAuthenticated: false,\n  loading: false,\n  user: {\n    id: null,\n    firstName: null,\n    lastName: null,\n    email: null,\n    username: null,\n  },\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGOUT_SUCCESS:\n    case AUTH_ERROR:\n      return {\n        loading: false,\n        isAuthenticated: false,\n        user: {\n          id: null,\n          firstName: null,\n          lastName: null,\n          email: null,\n          username: null,\n        },\n      };\n    case USER_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case USER_LOADED:\n      return {\n        ...state,\n        loading: false,\n      };\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      return {\n        loading: false,\n        isAuthenticated: true,\n        user: {\n          id: action.payload._id,\n          firstName: action.payload.firstName,\n          lastName: action.payload.lastName,\n          email: action.payload.email,\n          username: action.payload.username,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;\n","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/actions/types.js",[],"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/actions/authActions.js",["126","127","128"],"import {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n} from \"./types\";\nimport { returnError } from \"./errorActions\";\nimport axios from \"axios\";\naxios.defaults.withCredentials = true;\n\nexport const getUser = () => async (dispatch, getState) => {\n  dispatch(setUserLoading());\n\n  try {\n    const response = await axios.get(\"http://localhost:8080/user\");\n    dispatch({\n      type: USER_LOADED,\n      payload: response.data,\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\nexport const authenticateUser = (username, password) => async (dispatch) => {\n  dispatch(setUserLoading());\n\n  try {\n    const response = await axios.post(\"http://localhost:8080/user/login\", {\n      username,\n      password,\n    });\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: response.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n    dispatch(returnError(error));\n  }\n};\n\nexport const logoutUser = () => async (dispatch) => {\n  dispatch(setUserLoading());\n\n  try {\n    const response = await axios.get(\"http://localhost:8080/user/logout\");\n    dispatch({\n      type: LOGOUT_SUCCESS,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING,\n  };\n};\n\nexport const registerUser = (\n  username,\n  password,\n  email,\n  firstName,\n  lastName\n) => async (dispatch) => {\n  dispatch(setUserLoading());\n\n  try {\n    const response = await axios.post(\"http://localhost:8080/user\", {\n      username,\n      password,\n      email,\n      firstName,\n      lastName,\n    });\n    console.log(response);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: response.data,\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/socket.js",[],"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/components/SignUpModal.js",["129"],"import React, { Component } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport styled from \"styled-components\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport e from \"cors\";\nimport PropTypes from \"prop-types\";\n\n// redux\nimport { registerUser } from \"../actions/authActions\";\nimport { connect } from \"react-redux\";\n\nconst TextFieldStyle = {\n  paddingBottom: \"0.6rem\",\n};\n\nconst ModalBody = styled.div`\n  display: flex;\n  width: 25vw;\n  height: auto;\n  background-color: white;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst StyledModal = styled(Modal)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-radius: 5px;\n`;\n\nconst ModalHeader = styled.span`\n  font-size: 1.3rem;\n  padding: 1rem;\n`;\n\nconst Form = styled.form`\n  width: 83%;\n  display: flex;\n  flex-direction: column;\n  padding-bottom: 1.4rem;\n`;\n\nclass SignUpModal extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const {\n      username,\n      password,\n      confirmPassword,\n      firstName,\n      lastName,\n      email,\n    } = this.state;\n\n    if (\n      !username ||\n      !password ||\n      !confirmPassword ||\n      !firstName ||\n      !lastName ||\n      !email\n    ) {\n      return;\n    }\n\n    if (password === confirmPassword) {\n      try {\n        this.props.registerUser(username, password, email, firstName, lastName);\n      } catch (error) {}\n    }\n  };\n\n  handleChange = async (e) => {\n    await this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <StyledModal\n          open={this.props.signUpModalIsOpen}\n          onClose={() => this.props.toggleModalOpen()}\n        >\n          <ModalBody>\n            <ModalHeader>Sign Up</ModalHeader>\n            <Form>\n              <TextField\n                type=\"username\"\n                name=\"username\"\n                label=\"Username\"\n                id=\"username\"\n                variant=\"outlined\"\n                margin=\"dense\"\n                style={TextFieldStyle}\n                onChange={this.handleChange}\n              />\n              <TextField\n                type=\"email\"\n                name=\"email\"\n                label=\"Email\"\n                id=\"exampleEmail\"\n                variant=\"outlined\"\n                margin=\"dense\"\n                style={TextFieldStyle}\n                onChange={this.handleChange}\n              />\n              <TextField\n                type=\"firstName\"\n                name=\"firstName\"\n                label=\"First Name\"\n                id=\"firstName\"\n                variant=\"outlined\"\n                margin=\"dense\"\n                style={TextFieldStyle}\n                onChange={this.handleChange}\n              />\n              <TextField\n                type=\"lastName\"\n                name=\"lastName\"\n                label=\"Last Name\"\n                id=\"lastName\"\n                variant=\"outlined\"\n                margin=\"dense\"\n                style={TextFieldStyle}\n                onChange={this.handleChange}\n              />\n              <TextField\n                type=\"password\"\n                name=\"password\"\n                label=\"Password\"\n                id=\"password\"\n                variant=\"outlined\"\n                margin=\"dense\"\n                style={TextFieldStyle}\n                onChange={this.handleChange}\n              />\n              <TextField\n                type=\"password\"\n                name=\"confirmPassword\"\n                label=\"Confirm Password\"\n                id=\"confirmPassword\"\n                variant=\"outlined\"\n                margin=\"dense\"\n                style={TextFieldStyle}\n                onChange={this.handleChange}\n              />\n              <Button\n                color=\"primary\"\n                style={{\n                  backgroundColor: \"rgb(22, 204, 152, 0.7)\",\n                  color: \"white\",\n                }}\n                onClick={this.handleSubmit}\n              >\n                Let's Go!\n              </Button>\n            </Form>\n          </ModalBody>\n        </StyledModal>\n      </div>\n    );\n  }\n}\n\nSignUpModal.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { registerUser })(SignUpModal);\n","/Users/patrickoconnor/Documents/code/instant-messenger/client/src/actions/errorActions.js",["130"],"/Users/patrickoconnor/Documents/code/instant-messenger/client/src/reducers/errorReducer.js",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":5,"column":8,"nodeType":"137","messageId":"138","endLine":5,"endColumn":15},{"ruleId":"135","severity":1,"message":"139","line":8,"column":8,"nodeType":"137","messageId":"138","endLine":8,"endColumn":20},{"ruleId":"135","severity":1,"message":"140","line":82,"column":9,"nodeType":"137","messageId":"138","endLine":82,"endColumn":18},{"ruleId":"141","severity":1,"message":"142","line":83,"column":25,"nodeType":"143","messageId":"144","endLine":83,"endColumn":27},{"ruleId":"135","severity":1,"message":"145","line":4,"column":8,"nodeType":"137","messageId":"138","endLine":4,"endColumn":13},{"ruleId":"135","severity":1,"message":"146","line":16,"column":7,"nodeType":"137","messageId":"138","endLine":16,"endColumn":11},{"ruleId":"135","severity":1,"message":"147","line":2,"column":8,"nodeType":"137","messageId":"138","endLine":2,"endColumn":14},{"ruleId":"135","severity":1,"message":"148","line":3,"column":8,"nodeType":"137","messageId":"138","endLine":3,"endColumn":17},{"ruleId":"135","severity":1,"message":"149","line":6,"column":8,"nodeType":"137","messageId":"138","endLine":6,"endColumn":13},{"ruleId":"135","severity":1,"message":"150","line":7,"column":8,"nodeType":"137","messageId":"138","endLine":7,"endColumn":19},{"ruleId":"135","severity":1,"message":"151","line":11,"column":8,"nodeType":"137","messageId":"138","endLine":11,"endColumn":22},{"ruleId":"135","severity":1,"message":"145","line":3,"column":8,"nodeType":"137","messageId":"138","endLine":3,"endColumn":13},{"ruleId":"135","severity":1,"message":"152","line":21,"column":3,"nodeType":"137","messageId":"138","endLine":21,"endColumn":11},{"ruleId":"135","severity":1,"message":"153","line":6,"column":3,"nodeType":"137","messageId":"138","endLine":6,"endColumn":13},{"ruleId":"135","severity":1,"message":"154","line":9,"column":3,"nodeType":"137","messageId":"138","endLine":9,"endColumn":16},{"ruleId":"135","severity":1,"message":"153","line":6,"column":3,"nodeType":"137","messageId":"138","endLine":6,"endColumn":13},{"ruleId":"135","severity":1,"message":"154","line":9,"column":3,"nodeType":"137","messageId":"138","endLine":9,"endColumn":16},{"ruleId":"135","severity":1,"message":"155","line":57,"column":11,"nodeType":"137","messageId":"138","endLine":57,"endColumn":19},{"ruleId":"135","severity":1,"message":"156","line":6,"column":8,"nodeType":"137","messageId":"138","endLine":6,"endColumn":9},{"ruleId":"135","severity":1,"message":"154","line":1,"column":22,"nodeType":"137","messageId":"138","endLine":1,"endColumn":35},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar","'ListItemText' is defined but never used.","'recipient' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'axios' is defined but never used.","'Time' is assigned a value but never used.","'styled' is defined but never used.","'TextField' is defined but never used.","'Input' is defined but never used.","'FilledInput' is defined but never used.","'FormHelperText' is defined but never used.","'devTools' is assigned a value but never used.","'LOGIN_FAIL' is defined but never used.","'REGISTER_FAIL' is defined but never used.","'response' is assigned a value but never used.","'e' is defined but never used.","no-global-assign","no-unsafe-negation"]